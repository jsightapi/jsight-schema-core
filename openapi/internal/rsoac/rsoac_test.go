package rsoac

import (
	"testing"
)

func Test_Regex(t *testing.T) {
	tests := []testConverterRegex{
		{
			`/OK/`,
			`{
        		"type": "string",
        		"pattern": "OK"
			}`,
		},
		{ // regular expression matches the slash character
			`/\\/`,
			`{ 
					"type": "string",
					"pattern": "\\\\"
			}`,
		},
		{ // regular expression matches the backward slash character
			`/\//`,
			`{ 
					"type": "string",
					"pattern": "\\/"
			}`,
		},
		{
			`/\n/`,
			`{ 
					"type": "string",
					"pattern": "\\n"
			}`,
		},
		{
			`/\x0A/`,
			`{ 
					"type": "string",
					"pattern": "\\x0A"
			}`,
		},
		{
			`/"/`,
			`{ 
					"type": "string",
					"pattern": "\""
			}`,
		},
		{
			`/'/`,
			`{ 
					"type": "string",
					"pattern": "'"
			}`,
		},
		{
			`/Hello, 世界/`,
			`{ 
					"type": "string",
					"pattern": "Hello, 世界"
			}`,
		},
		{
			`/ /`,
			`{ 
					"type": "string",
					"pattern": " "
			}`,
		},
		{
			`/^[A-Z][a-z]*( [A-Z][a-z]*)*$/`,
			`{
        		"type": "string",
        		"pattern": "^[A-Z][a-z]*( [A-Z][a-z]*)*$"
			}`,
		},
		{
			`/^[a-zA-Z0-9.!#$%&'*+\/=?^_` + "`" + `{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/`,
			`{ 
					"type": "string",
					"pattern": "^[a-zA-Z0-9.!#$%&'*+\\/=?^_` + "`" + `{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$"
				}`,
		},
		{
			`/(?:[a-z0-9!#$%&'*+\\\/=?^_` + "`" + `{|}~-])+(?:\\.[a-z0-9!#$%&'*+\\\/=?^_` + "`" + `{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e\-\\x1f\\x21\\x23-\\x5b\\x5d\-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e\-\\x7f])*\"\)@\(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\)\\.\){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e\-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e\-\\x7f])+)\\]\)/`,
			`{ 
					"type": "string",
					"pattern": "(?:[a-z0-9!#$%&'*+\\\\\\\/=?^_` + "`" + `{|}~-])+(?:\\\\.[a-z0-9!#$%&'*+\\\\\\\/=?^_` + "`" + `{|}~-]+)*|\\\"(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e\\-\\\\x1f\\\\x21\\\\x23-\\\\x5b\\\\x5d\\-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e\\-\\\\x7f])*\\\"\\)@\\(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?\\)\\\\.\\){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\\\x01-\\\\x08\\\\x0b\\\\x0c\\\\x0e\\-\\\\x1f\\\\x21-\\\\x5a\\\\x53-\\\\x7f]|\\\\\\\\[\\\\x01-\\\\x09\\\\x0b\\\\x0c\\\\x0e\\-\\\\x7f])+)\\\\]\\)"		
			}`,
		},
		{
			`/([^][()<>@,;:\\". \x00-\x1F\x7F]+|"(\n|(\\\r)*([^"\\\r\n]|\\[^\r]))*(\\\r)*")(\.([^][()<>@,;:\\". \x00-\x1F\x7F]+|"(\n|(\\\r)*([^"\\\r\n]|\\[^\r]))*(\\\r)*"))*@([^][()<>@,;:\\". \x00-\x1F\x7F]+|\[(\n|(\\\r)*([^][\\\r\n]|\\[^\r]))*(\\\r)*])(\.([^][()<>@,;:\\". \x00-\x1F\x7F]+|\[(\n|(\\\r)*([^][\\\r\n]|\\[^\r]))*(\\\r)*]))*/`,
			`{ 
					"type": "string",
					"pattern": "([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\")(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\"(\\n|(\\\\\\r)*([^\"\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*\"))*@([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*])(\\.([^][()<>@,;:\\\\\". \\x00-\\x1F\\x7F]+|\\[(\\n|(\\\\\\r)*([^][\\\\\\r\\n]|\\\\[^\\r]))*(\\\\\\r)*]))*"		
			}`,
		},
	}
	for _, data := range tests {
		t.Run(data.name(), func(t *testing.T) {
			assertJSightToOpenAPIConverter(t, data)
		})
	}
}
